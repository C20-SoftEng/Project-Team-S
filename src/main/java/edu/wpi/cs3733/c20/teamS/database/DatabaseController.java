package edu.wpi.cs3733.c20.teamS.database;

import org.omg.SendingContext.RunTime;

import javax.xml.crypto.Data;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class DatabaseController {
    private static Connection connection = null;

    /**
     * Ensures there is only one connection to the database;
     */
    static {
        createDatabase();
        dropTablesIfTheyExist();
        createTables();
    }
    public DatabaseController() {}

    private static void createTables() {
        try {
            Statement stm = connection.createStatement();
            createNodesTable(stm);
            createEdgesTable(stm);
            createEmployeesTable(stm);
            createServiceableTable(stm);
            createServicesTable(stm);

        }
        catch (SQLException e) {
            System.out.print("Failed to create one of tables, aborting...");
            throw new RuntimeException();
        }
    }

    private static void createServicesTable(Statement stm) throws SQLException {
        stm.execute("CREATE TABLE SERVICES(" +
                         "serviceID INTEGER GENERATED BY DEFAULT AS IDENTITY constraint pKey_serviceID primary key," +
                         "serviceType varchar(4)," +
                         "status varchar(50)," +
                         "assignedEmployee INTEGER CONSTRAINT fKey_empAssigned references EMPLOYEES (employeeID)," +
                         "timeCreated DATE)");
        System.out.println("Created Table SERVICES");
    }
    private static void createServiceableTable(Statement stm) throws SQLException {
        stm.execute("CREATE TABLE SERVICEABLE(" +
                         "employeeID INTEGER CONSTRAINT fKey_service references EMPLOYEES(employeeID)," +
                         "serviceType varchar(4)," +
                         "constraint pKey_canDO primary key (employeeID, serviceType))");
        System.out.println("Created Table SERVICEABLE");
    }
    private static void createEmployeesTable(Statement stm) throws SQLException {
        stm.execute("CREATE TABLE EMPLOYEES(" +
                        "employeeID INTEGER GENERATED BY DEFAULT AS IDENTITY CONSTRAINT pKey_empID primary key," +
                        "userName varchar(50) constraint uKey_userName unique," +
                        "accessLevel INTEGER," +
                        "firstName varchar(30)," +
                        "lastName varchar(30))");
        System.out.println("Created Table Employees");
    }
    private static void createEdgesTable(Statement stm) throws SQLException {
        stm.execute("CREATE TABLE EDGES(" +
                        "edgeID varchar(1024)," +
                        "startNode varchar(1024) constraint fKey_startNodeID references NODES (nodeID)," +
                        "endNode varchar(1024) constraint fkey_endNodeID references NODES (nodeID))");
        System.out.println("Created Table Edges");
    }
    private static void createNodesTable(Statement stm) throws SQLException {
        stm.execute("CREATE TABLE NODES(" +
                        "nodeID VARCHAR(1024)," +
                        "xcoord double," +
                        "ycoord double," +
                        "floor int," +
                        "building varchar(50)," +
                        "nodeType varchar(4)," +
                        "longName varchar(1024)," +
                        "shortName varchar(50)," +
                        "constraint pkey_nodeID Primary Key (nodeID))");
        System.out.println("Created Table Nodes");
    }

    private static void dropTablesIfTheyExist() {
        try{
            Statement stm = connection.createStatement();
            stm.execute("Drop table EDGES");
        }catch(SQLException e){
            System.out.println("EDGES WAS NOT DROPPED");
        }

        System.out.println("Dropped Table Edges");

        try{
            Statement stm = connection.createStatement();
            stm.execute("Drop table NODES");
        }catch(SQLException e){
            System.out.println("NODES WAS NOT DROPPED");
        }

        System.out.println("Dropped Table Nodes");

        try{
            Statement stm = connection.createStatement();
            stm.execute("Drop table SERVICES");
        }catch(SQLException e){
            System.out.println("SERVICES WAS NOT DROPPED");
        }

        System.out.println("Dropped Table SERVICES");

        try{
            Statement stm = connection.createStatement();
            stm.execute("Drop table SERVICEABLE");
        }catch(SQLException e){
            System.out.println("SERVICEABLE WAS NOT DROPPED");
        }

        System.out.println("Dropped Table SERVICEABLE");

        try{
            Statement stm = connection.createStatement();
            stm.execute("Drop table EMPLOYEES");
        }catch(SQLException e){
            System.out.println("EMPLOYEES WAS NOT DROPPED");
        }

        System.out.println("Dropped Table EMPLOYEES");
    }
    private static void createDatabase() {
        /////////////////////MAKE DATABASE//////////////////////////////
        try {
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
        }catch(ClassNotFoundException ex){
            System.out.println(ex.getMessage());
            System.out.println("Failed to get embedded driver");
            throw new RuntimeException();
        }
        try{
            connection = DriverManager.getConnection("jdbc:derby:hospitalDB;create=true");
            Statement init = connection.createStatement();
        }catch(SQLException ex){
            System.out.println(ex.getMessage());
            System.out.println("Failed to connect to database");
            throw new RuntimeException();
        }
    }

}
