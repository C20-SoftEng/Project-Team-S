package edu.wpi.cs3733.c20.teamS.database;

import edu.wpi.cs3733.c20.teamS.database.DataClasses.EdgeData;
import edu.wpi.cs3733.c20.teamS.database.DataClasses.NodeData;
import org.omg.SendingContext.RunTime;

import javax.xml.crypto.Data;
import javax.xml.transform.Result;
import java.sql.*;
import java.util.HashSet;
import java.util.Set;

public class DatabaseController {
    private static Connection connection = null;


    /**
     * Ensures there is only one connection to the database;
     */
    static {
        /////////////////////MAKE DATABASE//////////////////////////////
        try {
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
        }catch(ClassNotFoundException ex){
            System.out.println(ex.getMessage());
            System.out.println("Failed to get embedded driver");
            throw new RuntimeException();
        }
        try{
            connection = DriverManager.getConnection("jdbc:derby:hospitalDB;create=true");
            Statement init = connection.createStatement();
        }catch(java.sql.SQLException ex){
            System.out.println(ex.getMessage());
            System.out.println("Failed to connect to database");
            throw new RuntimeException();
        }

        ////////////////////DROP TABLES IF THEY EXIST/////////////////////
        try{
            Statement stm = connection.createStatement();
            stm.execute("Drop table EDGES");
        }catch(SQLException e){
            System.out.println("EDGES WAS NOT DROPPED");
        }

            System.out.println("Dropped Table Edges");


        try{
            Statement stm = connection.createStatement();
            stm.execute("Drop table SERVICES");
        }catch(SQLException e){
            System.out.println("SERVICES WAS NOT DROPPED");
        }

        System.out.println("Dropped Table SERVICES");

        try{
            Statement stm = connection.createStatement();
            stm.execute("Drop table NODES");
        }catch(SQLException e){
            System.out.println("NODES WAS NOT DROPPED");
        }

            System.out.println("Dropped Table Nodes");


        try{
            Statement stm = connection.createStatement();
            stm.execute("Drop table SERVICEABLE");
        }catch(SQLException e){
            System.out.println("SERVICEABLE WAS NOT DROPPED");
        }

            System.out.println("Dropped Table SERVICEABLE");

        try{
            Statement stm = connection.createStatement();
            stm.execute("Drop table EMPLOYEES");
        }catch(SQLException e){
            System.out.println("EMPLOYEES WAS NOT DROPPED");
        }

            System.out.println("Dropped Table EMPLOYEES");




        /////////////////////CREATE TABLES/////////////////////////////
        try{
            Statement stm = connection.createStatement();
            stm.execute("CREATE TABLE NODES(" +
                            "nodeID VARCHAR(1024)," +
                            "xcoord double," +
                            "ycoord double," +
                            "floor int," +
                            "building varchar(50)," +
                            "nodeType varchar(4)," +
                            "longName varchar(1024)," +
                            "shortName varchar(50)," +
                            "constraint pkey_nodeID Primary Key (nodeID))");

            System.out.println("Created Table Nodes");

            stm.execute("CREATE TABLE EDGES(" +
                            "edgeID varchar(1024) constraint pKey_edgeID PRIMARY KEY," +
                            "startNode varchar(1024) constraint fKey_startNodeID references NODES (nodeID)," +
                            "endNode varchar(1024) constraint fkey_endNodeID references NODES (nodeID))");

            System.out.println("Created Table Edges");

            stm.execute("CREATE TABLE EMPLOYEES(" +
                            "employeeID INTEGER GENERATED BY DEFAULT AS IDENTITY CONSTRAINT pKey_empID primary key," +
                            "userName varchar(50) constraint uKey_userName unique," +
                            "password varchar(25)," +
                            "accessLevel INTEGER," +
                            "firstName varchar(30)," +
                            "lastName varchar(30))");

            System.out.println("Created Table Employees");

            stm.execute("CREATE TABLE SERVICEABLE(" +
                             "employeeID INTEGER CONSTRAINT fKey_service references EMPLOYEES(employeeID)," +
                             "serviceType varchar(4)," +
                             "constraint pKey_canDO primary key (employeeID, serviceType))");

            System.out.println("Created Table SERVICEABLE");

            stm.execute("CREATE TABLE SERVICES(" +
                             "serviceID INTEGER GENERATED BY DEFAULT AS IDENTITY constraint pKey_serviceID primary key," +
                             "serviceType varchar(4)," +
                             "status varchar(50)," +
                             "message varchar(2056)," +
                             "assignedEmployee INTEGER CONSTRAINT fKey_empAssigned references EMPLOYEES (employeeID)," +
                             "timeCreated DATE," +
                             "location varchar(1024) constraint fKey_nodeService references NODES (nodeid))");

            System.out.println("Created Table SERVICES");

        }catch(SQLException e){
            System.out.print("Failed to create one of tables, aborting...");
            throw new RuntimeException();
        }




    }

    public DatabaseController(){





    }


    //Tested
    public void addNode(NodeData nd){
        String insert = "INSERT INTO NODES VALUES(?,?,?,?,?,?,?,?)";
        try{
            PreparedStatement stm = connection.prepareStatement(insert);
            stm.setString(1,nd.getNodeID());
            stm.setDouble(2,nd.getxCoordinate());
            stm.setDouble(3,nd.getyCoordinate());
            stm.setInt(4, nd.getFloor());
            stm.setString(5,nd.getBuilding());
            stm.setString(6,nd.getNodeType());
            stm.setString(7,nd.getLongName());
            stm.setString(8,nd.getShortName());
            stm.execute();
        }catch(SQLException e){
            System.out.println("Failed to insert into nodes");
            throw new RuntimeException();
        }

    }

    //Tested
    public void addSetOfNodes(Set<NodeData> set){
        for(NodeData nd : set){
            addNode(nd);
        }
    }
    //Tested
    public Set<NodeData> getAllNodes(){
        Statement stm = null;
        try{
            stm = connection.createStatement();
        }catch(java.sql.SQLException e){
            System.out.println(e.getMessage());
            throw new RuntimeException(e);
        }
        String allNodeString = "SELECT * FROM Nodes";
        ResultSet rset = null;
        Set<NodeData> nodeSet = new HashSet<NodeData>();
        try {
            rset = stm.executeQuery(allNodeString);
        }catch(java.sql.SQLException state){
            System.out.println(state.getMessage());
            state.printStackTrace();
            throw new RuntimeException(state);
        }
        nodeSet = parseNodeResultSet(rset);
        try{
            rset.close();
        }catch(java.sql.SQLException e){
            System.out.println(e.getMessage());
            e.printStackTrace();
            throw new RuntimeException(e);
        }
        return nodeSet;
    }

    //Tested
    public Set<NodeData> parseNodeResultSet(ResultSet rset) {
        Set<NodeData> nodeSet = new HashSet<NodeData>();
        String nodeID;
        double x, y;
        int floor;
        String building;
        String nodeType;
        String longName;
        String shortName;
        try {
            while (rset.next()) {
                nodeID = rset.getString("nodeID");
                x = rset.getDouble("xcoord");
                y = rset.getDouble("ycoord");
                floor = rset.getInt("floor");
                building = rset.getString("building");
                nodeType = rset.getString("nodeType");
                longName = rset.getString("longName");
                shortName = rset.getString("shortName");
                nodeSet.add(new NodeData(nodeID, x, y, floor, building, nodeType, longName, shortName));
            }

        } catch (java.sql.SQLException rsetFailure) {
            System.out.println(rsetFailure.getMessage());
            rsetFailure.printStackTrace();
            throw new RuntimeException(rsetFailure);
        }

        return nodeSet;
    }

    //Tested
    public Set<EdgeData> getAllEdges(){
        Statement stm = null;
        try{
            stm = connection.createStatement();
        }catch(java.sql.SQLException e){
            System.out.println(e.getMessage());
        }
        String allNodeString = "SELECT * FROM Edges";
        ResultSet rset = null;
        try {
            rset = stm.executeQuery(allNodeString);
        }catch(java.sql.SQLException state){
            System.out.println(state.getMessage());
            state.printStackTrace();
        }
        Set<EdgeData> edgeSet = parseEdgeResultSet(rset);
        try{
            rset.close();
        }catch(java.sql.SQLException e){
            System.out.println(e.getMessage());
            e.printStackTrace();
            throw new RuntimeException();
        }
        return edgeSet;
    }

    //Tested
    public Set<EdgeData> parseEdgeResultSet(ResultSet rset){
        String edgeID;
        String startNodeID;
        String endNodeID;
        Set<EdgeData> edgeSet = new HashSet<>();
        try{
            while(rset.next()){
                edgeID = rset.getString("edgeID");
                startNodeID = rset.getString("startNode");
                endNodeID = rset.getString("endNode");
                edgeSet.add(new EdgeData(edgeID, startNodeID, endNodeID));
            }
        }catch(java.sql.SQLException rsetFailure){
            System.out.println(rsetFailure.getMessage());
            rsetFailure.printStackTrace();
            throw new RuntimeException();
        }
        return edgeSet;
    }

    //Tested
    public void addEdge(EdgeData edge) {
        String addEntryStr = "INSERT INTO EDGES VALUES (?, ?, ?)";
        try {
            PreparedStatement addStm = connection.prepareCall(addEntryStr);
            addStm.setString(1,edge.getEdgeID());
            addStm.setString(2,edge.getStartNode());
            addStm.setString(3,edge.getEndNode());
            addStm.execute();
            addStm.close();
        }catch(SQLException e){
            throw new RuntimeException();
        }
    }

    //Tested
    public NodeData getNode(String ID){
        String getNodeStr = "SELECT * FROM NODES WHERE NODEID = ?";
        ResultSet rset = null;
        try {
            PreparedStatement getStm = connection.prepareCall(getNodeStr);
            getStm.setString(1,ID);
            rset = getStm.executeQuery();
        }catch(SQLException e){
            System.out.println(e.getMessage());
            throw new RuntimeException();
        }
        Set<NodeData> nodeSet = parseNodeResultSet(rset);
        if(nodeSet.isEmpty()){
            System.out.println("Node Not Found");
            return null;
        }
        System.out.println("Got Node");
        NodeData returnNode = null;
        for(NodeData nd : nodeSet){
            returnNode = nd;

        }
        return returnNode;
    }








}
