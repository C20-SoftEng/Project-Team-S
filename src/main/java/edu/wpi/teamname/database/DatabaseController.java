package edu.wpi.teamname.database;

import org.omg.SendingContext.RunTime;

import javax.xml.crypto.Data;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class DatabaseController {
    private static Connection connection = null;


    /**
     * Ensures there is only one connection to the database;
     */
    static {
        /////////////////////MAKE DATABASE//////////////////////////////
        try {
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
        }catch(ClassNotFoundException ex){
            System.out.println(ex.getMessage());
            System.out.println("Failed to get embedded driver");
            throw new RuntimeException();
        }
        try{
            connection = DriverManager.getConnection("jdbc:derby:hospitalDB;create=true");
            Statement init = connection.createStatement();
        }catch(java.sql.SQLException ex){
            System.out.println(ex.getMessage());
            System.out.println("Failed to connect to database");
            throw new RuntimeException();
        }

        ////////////////////DROP TABLES IF THEY EXIST/////////////////////
        try{
            Statement stm = connection.createStatement();
            stm.execute("Drop table EDGES");
        }catch(SQLException e){
            System.out.println("ATLEAST ONE TABLE WAS NOT DROPPED");
        }

            System.out.println("Dropped Table Edges");
            stm.execute("DROP TABLE NODES");
            System.out.println("Dropped Table Nodes");
            stm.execute("DROP TABLE SERVICES");
            System.out.println("Dropped Table Services");
            stm.execute("DROP TABLE SERVICEABLE");
            System.out.println("Dropped Table Serviceable");
            stm.execute("DROP TABLE EMPLOYEES");
            System.out.println("Dropped Table Employees");




        /////////////////////CREATE TABLES/////////////////////////////
        try{
            Statement stm = connection.createStatement();
            stm.execute("CREATE TABLE NODES(" +
                            "nodeID VARCHAR(1024)," +
                            "xcoord double," +
                            "ycoord double," +
                            "floor int," +
                            "building varchar(50)," +
                            "nodeType varchar(4)," +
                            "longName varchar(1024)," +
                            "shortName varchar(50)," +
                            "constraint pkey_nodeID Primary Key (nodeID))");

            System.out.println("Created Table Nodes");

            stm.execute("CREATE TABLE EDGES(" +
                            "edgeID varchar(1024)," +
                            "startNode varchar(1024) constraint fKey_startNodeID references NODES (nodeID)," +
                            "endNode varchar(1024) constraint fkey_endNodeID references NODES (nodeID))");

            System.out.println("Created Table Edges");

            stm.execute("CREATE TABLE EMPLOYEES(" +
                            "employeeID INTEGER GENERATED BY DEFAULT AS IDENTITY CONSTRAINT pKey_empID primary key," +
                            "userName varchar(50) constraint uKey_userName unique," +
                            "accessLevel INTEGER," +
                            "firstName varchar(30)," +
                            "lastName varchar(30))");

            System.out.println("Created Table Employees");

            stm.execute("CREATE TABLE SERVICEABLE(" +
                             "employeeID INTEGER CONSTRAINT fKey_service references EMPLOYEES(employeeID)," +
                             "serviceType varchar(4)," +
                             "constraint pKey_canDO primary key (employeeID, serviceType))");

            System.out.println("Created Table SERVICEABLE");

            stm.execute("CREATE TABLE SERVICES(" +
                             "serviceID INTEGER GENERATED BY DEFAULT AS IDENTITY constraint pKey_serviceID primary key," +
                             "serviceType varchar(4)," +
                             "status varchar(50)," +
                             "assignedEmployee INTEGER CONSTRAINT fKey_empAssigned references EMPLOYEES (employeeID)," +
                             "timeCreated DATE)");

            System.out.println("Created Table SERVICES");

        }catch(SQLException e){
            System.out.print("Failed to create one of tables, aborting...");
            throw new RuntimeException();
        }




    }

    public DatabaseController(){





    }

}
